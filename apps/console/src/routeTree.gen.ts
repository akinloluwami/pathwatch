/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as _authedRouteImport } from './routes/__authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiDemoNamesRouteImport } from './routes/api.demo-names'
import { Route as _authtedOrgRouteImport } from './routes/__authted/$org'
import { Route as _authtedOrgIndexRouteImport } from './routes/__authted/$org/index'
import { Route as _authtedOrgTelmentaryRouteImport } from './routes/__authted/$org/telmentary'
import { Route as _authtedOrgTelmentaryProjectIdRouteImport } from './routes/__authted/$org/telmentary/$projectId'
import { Route as _authtedOrgTelmentaryProjectIdIndexRouteImport } from './routes/__authted/$org/telmentary/$projectId/index'
import { Route as _authtedOrgTelmentaryProjectIdLogsRouteImport } from './routes/__authted/$org/telmentary/$projectId/logs'
import { Route as _authtedOrgTelmentaryProjectIdAnalyticsRouteImport } from './routes/__authted/$org/telmentary/$projectId/analytics'
import { Route as _authtedOrgTelmentaryProjectIdAlertsRouteImport } from './routes/__authted/$org/telmentary/$projectId/alerts'

const _authedRoute = _authedRouteImport.update({
  id: '/__authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiDemoNamesRoute = ApiDemoNamesRouteImport.update({
  id: '/api/demo-names',
  path: '/api/demo-names',
  getParentRoute: () => rootRouteImport,
} as any)
const _authtedOrgRoute = _authtedOrgRouteImport.update({
  id: '/__authted/$org',
  path: '/$org',
  getParentRoute: () => rootRouteImport,
} as any)
const _authtedOrgIndexRoute = _authtedOrgIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => _authtedOrgRoute,
} as any)
const _authtedOrgTelmentaryRoute = _authtedOrgTelmentaryRouteImport.update({
  id: '/telmentary',
  path: '/telmentary',
  getParentRoute: () => _authtedOrgRoute,
} as any)
const _authtedOrgTelmentaryProjectIdRoute =
  _authtedOrgTelmentaryProjectIdRouteImport.update({
    id: '/$projectId',
    path: '/$projectId',
    getParentRoute: () => _authtedOrgTelmentaryRoute,
  } as any)
const _authtedOrgTelmentaryProjectIdIndexRoute =
  _authtedOrgTelmentaryProjectIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => _authtedOrgTelmentaryProjectIdRoute,
  } as any)
const _authtedOrgTelmentaryProjectIdLogsRoute =
  _authtedOrgTelmentaryProjectIdLogsRouteImport.update({
    id: '/logs',
    path: '/logs',
    getParentRoute: () => _authtedOrgTelmentaryProjectIdRoute,
  } as any)
const _authtedOrgTelmentaryProjectIdAnalyticsRoute =
  _authtedOrgTelmentaryProjectIdAnalyticsRouteImport.update({
    id: '/analytics',
    path: '/analytics',
    getParentRoute: () => _authtedOrgTelmentaryProjectIdRoute,
  } as any)
const _authtedOrgTelmentaryProjectIdAlertsRoute =
  _authtedOrgTelmentaryProjectIdAlertsRouteImport.update({
    id: '/alerts',
    path: '/alerts',
    getParentRoute: () => _authtedOrgTelmentaryProjectIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$org': typeof _authtedOrgRouteWithChildren
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/$org/telmentary': typeof _authtedOrgTelmentaryRouteWithChildren
  '/$org/': typeof _authtedOrgIndexRoute
  '/$org/telmentary/$projectId': typeof _authtedOrgTelmentaryProjectIdRouteWithChildren
  '/$org/telmentary/$projectId/alerts': typeof _authtedOrgTelmentaryProjectIdAlertsRoute
  '/$org/telmentary/$projectId/analytics': typeof _authtedOrgTelmentaryProjectIdAnalyticsRoute
  '/$org/telmentary/$projectId/logs': typeof _authtedOrgTelmentaryProjectIdLogsRoute
  '/$org/telmentary/$projectId/': typeof _authtedOrgTelmentaryProjectIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/$org/telmentary': typeof _authtedOrgTelmentaryRouteWithChildren
  '/$org': typeof _authtedOrgIndexRoute
  '/$org/telmentary/$projectId/alerts': typeof _authtedOrgTelmentaryProjectIdAlertsRoute
  '/$org/telmentary/$projectId/analytics': typeof _authtedOrgTelmentaryProjectIdAnalyticsRoute
  '/$org/telmentary/$projectId/logs': typeof _authtedOrgTelmentaryProjectIdLogsRoute
  '/$org/telmentary/$projectId': typeof _authtedOrgTelmentaryProjectIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/__authed': typeof _authedRoute
  '/__authted/$org': typeof _authtedOrgRouteWithChildren
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/__authted/$org/telmentary': typeof _authtedOrgTelmentaryRouteWithChildren
  '/__authted/$org/': typeof _authtedOrgIndexRoute
  '/__authted/$org/telmentary/$projectId': typeof _authtedOrgTelmentaryProjectIdRouteWithChildren
  '/__authted/$org/telmentary/$projectId/alerts': typeof _authtedOrgTelmentaryProjectIdAlertsRoute
  '/__authted/$org/telmentary/$projectId/analytics': typeof _authtedOrgTelmentaryProjectIdAnalyticsRoute
  '/__authted/$org/telmentary/$projectId/logs': typeof _authtedOrgTelmentaryProjectIdLogsRoute
  '/__authted/$org/telmentary/$projectId/': typeof _authtedOrgTelmentaryProjectIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$org'
    | '/api/demo-names'
    | '/$org/telmentary'
    | '/$org/'
    | '/$org/telmentary/$projectId'
    | '/$org/telmentary/$projectId/alerts'
    | '/$org/telmentary/$projectId/analytics'
    | '/$org/telmentary/$projectId/logs'
    | '/$org/telmentary/$projectId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api/demo-names'
    | '/$org/telmentary'
    | '/$org'
    | '/$org/telmentary/$projectId/alerts'
    | '/$org/telmentary/$projectId/analytics'
    | '/$org/telmentary/$projectId/logs'
    | '/$org/telmentary/$projectId'
  id:
    | '__root__'
    | '/'
    | '/__authed'
    | '/__authted/$org'
    | '/api/demo-names'
    | '/__authted/$org/telmentary'
    | '/__authted/$org/'
    | '/__authted/$org/telmentary/$projectId'
    | '/__authted/$org/telmentary/$projectId/alerts'
    | '/__authted/$org/telmentary/$projectId/analytics'
    | '/__authted/$org/telmentary/$projectId/logs'
    | '/__authted/$org/telmentary/$projectId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  _authedRoute: typeof _authedRoute
  _authtedOrgRoute: typeof _authtedOrgRouteWithChildren
  ApiDemoNamesRoute: typeof ApiDemoNamesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__authed': {
      id: '/__authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _authedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/demo-names': {
      id: '/api/demo-names'
      path: '/api/demo-names'
      fullPath: '/api/demo-names'
      preLoaderRoute: typeof ApiDemoNamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__authted/$org': {
      id: '/__authted/$org'
      path: '/$org'
      fullPath: '/$org'
      preLoaderRoute: typeof _authtedOrgRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__authted/$org/': {
      id: '/__authted/$org/'
      path: '/'
      fullPath: '/$org/'
      preLoaderRoute: typeof _authtedOrgIndexRouteImport
      parentRoute: typeof _authtedOrgRoute
    }
    '/__authted/$org/telmentary': {
      id: '/__authted/$org/telmentary'
      path: '/telmentary'
      fullPath: '/$org/telmentary'
      preLoaderRoute: typeof _authtedOrgTelmentaryRouteImport
      parentRoute: typeof _authtedOrgRoute
    }
    '/__authted/$org/telmentary/$projectId': {
      id: '/__authted/$org/telmentary/$projectId'
      path: '/$projectId'
      fullPath: '/$org/telmentary/$projectId'
      preLoaderRoute: typeof _authtedOrgTelmentaryProjectIdRouteImport
      parentRoute: typeof _authtedOrgTelmentaryRoute
    }
    '/__authted/$org/telmentary/$projectId/': {
      id: '/__authted/$org/telmentary/$projectId/'
      path: '/'
      fullPath: '/$org/telmentary/$projectId/'
      preLoaderRoute: typeof _authtedOrgTelmentaryProjectIdIndexRouteImport
      parentRoute: typeof _authtedOrgTelmentaryProjectIdRoute
    }
    '/__authted/$org/telmentary/$projectId/logs': {
      id: '/__authted/$org/telmentary/$projectId/logs'
      path: '/logs'
      fullPath: '/$org/telmentary/$projectId/logs'
      preLoaderRoute: typeof _authtedOrgTelmentaryProjectIdLogsRouteImport
      parentRoute: typeof _authtedOrgTelmentaryProjectIdRoute
    }
    '/__authted/$org/telmentary/$projectId/analytics': {
      id: '/__authted/$org/telmentary/$projectId/analytics'
      path: '/analytics'
      fullPath: '/$org/telmentary/$projectId/analytics'
      preLoaderRoute: typeof _authtedOrgTelmentaryProjectIdAnalyticsRouteImport
      parentRoute: typeof _authtedOrgTelmentaryProjectIdRoute
    }
    '/__authted/$org/telmentary/$projectId/alerts': {
      id: '/__authted/$org/telmentary/$projectId/alerts'
      path: '/alerts'
      fullPath: '/$org/telmentary/$projectId/alerts'
      preLoaderRoute: typeof _authtedOrgTelmentaryProjectIdAlertsRouteImport
      parentRoute: typeof _authtedOrgTelmentaryProjectIdRoute
    }
  }
}

interface _authtedOrgTelmentaryProjectIdRouteChildren {
  _authtedOrgTelmentaryProjectIdAlertsRoute: typeof _authtedOrgTelmentaryProjectIdAlertsRoute
  _authtedOrgTelmentaryProjectIdAnalyticsRoute: typeof _authtedOrgTelmentaryProjectIdAnalyticsRoute
  _authtedOrgTelmentaryProjectIdLogsRoute: typeof _authtedOrgTelmentaryProjectIdLogsRoute
  _authtedOrgTelmentaryProjectIdIndexRoute: typeof _authtedOrgTelmentaryProjectIdIndexRoute
}

const _authtedOrgTelmentaryProjectIdRouteChildren: _authtedOrgTelmentaryProjectIdRouteChildren =
  {
    _authtedOrgTelmentaryProjectIdAlertsRoute:
      _authtedOrgTelmentaryProjectIdAlertsRoute,
    _authtedOrgTelmentaryProjectIdAnalyticsRoute:
      _authtedOrgTelmentaryProjectIdAnalyticsRoute,
    _authtedOrgTelmentaryProjectIdLogsRoute:
      _authtedOrgTelmentaryProjectIdLogsRoute,
    _authtedOrgTelmentaryProjectIdIndexRoute:
      _authtedOrgTelmentaryProjectIdIndexRoute,
  }

const _authtedOrgTelmentaryProjectIdRouteWithChildren =
  _authtedOrgTelmentaryProjectIdRoute._addFileChildren(
    _authtedOrgTelmentaryProjectIdRouteChildren,
  )

interface _authtedOrgTelmentaryRouteChildren {
  _authtedOrgTelmentaryProjectIdRoute: typeof _authtedOrgTelmentaryProjectIdRouteWithChildren
}

const _authtedOrgTelmentaryRouteChildren: _authtedOrgTelmentaryRouteChildren = {
  _authtedOrgTelmentaryProjectIdRoute:
    _authtedOrgTelmentaryProjectIdRouteWithChildren,
}

const _authtedOrgTelmentaryRouteWithChildren =
  _authtedOrgTelmentaryRoute._addFileChildren(
    _authtedOrgTelmentaryRouteChildren,
  )

interface _authtedOrgRouteChildren {
  _authtedOrgTelmentaryRoute: typeof _authtedOrgTelmentaryRouteWithChildren
  _authtedOrgIndexRoute: typeof _authtedOrgIndexRoute
}

const _authtedOrgRouteChildren: _authtedOrgRouteChildren = {
  _authtedOrgTelmentaryRoute: _authtedOrgTelmentaryRouteWithChildren,
  _authtedOrgIndexRoute: _authtedOrgIndexRoute,
}

const _authtedOrgRouteWithChildren = _authtedOrgRoute._addFileChildren(
  _authtedOrgRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  _authedRoute: _authedRoute,
  _authtedOrgRoute: _authtedOrgRouteWithChildren,
  ApiDemoNamesRoute: ApiDemoNamesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
